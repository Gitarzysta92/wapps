---
- name: Install dnsmasq
  package:
    name: dnsmasq
    state: present

- name: Create dnsmasq configuration directory
  file:
    path: /etc/dnsmasq.d
    state: directory
    mode: '0755'

- name: Create dnsmasq configuration for environments
  copy:
    content: |
      # DNS configuration for {{ target_env }} environment
      # Generated by Ansible - do not edit manually
      
      # Use port 5353 to avoid conflict with systemd-resolved
      port=5353
      
      # Listen on all interfaces
      listen-address=127.0.0.1
      listen-address={{ ansible_default_ipv4.address }}
      
      # Enable logging
      log-queries
      log-dhcp
      
      # Only handle {{ target_env }}.wapps.com domain and subdomains
      # This will resolve ANY subdomain to the specified IP
      address=/{{ target_env }}.wapps.com/{{ target_ip }}
      
      # Forward other queries to system DNS (don't interfere with normal DNS)
      server=8.8.8.8
      server=1.1.1.1
      
      # Cache settings
      cache-size=1000
      neg-ttl=3600
      
      # Don't read /etc/hosts
      no-hosts
      
      # Don't read /etc/resolv.conf
      no-resolv
    dest: /etc/dnsmasq.d/{{ target_env }}-wapps.conf
    mode: '0644'
  when: target_ip is defined and target_ip != ""

- name: Create main dnsmasq configuration
  copy:
    content: |
      # Main dnsmasq configuration
      # Generated by Ansible - do not edit manually
      
      # Include environment-specific configs
      conf-dir=/etc/dnsmasq.d
      
      # Log to syslog
      log-facility=/var/log/dnsmasq.log
    dest: /etc/dnsmasq.conf
    mode: '0644'

- name: Start and enable dnsmasq
  systemd:
    name: dnsmasq
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for dnsmasq to start
  wait_for:
    port: 5353
    host: "{{ ansible_default_ipv4.address }}"
    timeout: 10
  ignore_errors: yes

- name: Test DNS resolution
  shell: |
    nslookup -port=5353 argocd.{{ target_env }}.wapps.com {{ ansible_default_ipv4.address }}
  register: dns_test_result
  changed_when: false
  failed_when: false
  when: target_ip is defined and target_ip != ""

- name: Debug DNS test result
  debug:
    msg: |
      DNS Test Result for {{ target_env }}.wapps.com:
      {{ dns_test_result.stdout | default('DNS test not run') }}
  when: dns_test_result is defined

- name: Display DNS configuration status
  debug:
    msg: |
      {% if target_ip is defined and target_ip != "" %}
      ‚úÖ DNS configuration completed successfully!
      
      üåê Wildcard DNS: *.{{ target_env }}.wapps.com ‚Üí {{ target_ip }}
      
      üìç Service URLs (all resolve to the same IP):
      - ArgoCD: https://argocd.{{ target_env }}.wapps.com
      - K3s API: https://k3s-api.{{ target_env }}.wapps.com
      - Node Exporter: http://metrics.{{ target_env }}.wapps.com
      - Grafana: https://grafana.{{ target_env }}.wapps.com
      - Prometheus: https://prometheus.{{ target_env }}.wapps.com
      - ANY service: https://anything.{{ target_env }}.wapps.com
      
      üîß DNS Server info:
      - IP: {{ ansible_default_ipv4.address }}
      - Port: 5353
      - Environment: {{ target_env }}
      - Target IP: {{ target_ip }}
      
      üìã Next steps:
      1. Configure systemd-resolved to use this DNS server for {{ target_env }}.wapps.com
      2. Or configure Tailscale Split DNS to point to this server
      {% else %}
      ‚ùå DNS configuration failed - missing target_ip variable
      {% endif %}
