---
- name: Install nginx
  package:
    name: nginx
    state: present

- name: Create nginx configuration directory
  file:
    path: /etc/nginx/sites-available
    state: directory
    mode: '0755'

- name: Create nginx sites-enabled directory
  file:
    path: /etc/nginx/sites-enabled
    state: directory
    mode: '0755'

- name: Remove default nginx site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Create reverse proxy configuration
  template:
    content: |
      # Nginx reverse proxy configuration for {{ target_env }} environment
      # Generated by Ansible - do not edit manually
      
      # ArgoCD - GitOps CD
      server {
          listen 80;
          server_name argocd.{{ target_env }}.wapps.com;
          
          # Redirect HTTP to HTTPS
          return 301 https://$server_name$request_uri\;
      }
      
      server {
          listen 443 ssl http2;
          server_name argocd.{{ target_env }}.wapps.com;
          
          # SSL configuration (self-signed for now)
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
          ssl_prefer_server_ciphers off;
          
          # Proxy to ArgoCD
          location / {
              proxy_pass http://127.0.0.1:30080\;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              
              # Timeouts
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
      }
      
      # K3s API - Kubernetes API Server
      server {
          listen 80;
          server_name k3s-api.{{ target_env }}.wapps.com;
          
          # Redirect HTTP to HTTPS
          return 301 https://$server_name$request_uri\;
      }
      
      server {
          listen 443 ssl http2;
          server_name k3s-api.{{ target_env }}.wapps.com;
          
          # SSL configuration
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
          ssl_prefer_server_ciphers off;
          
          # Proxy to K3s API
          location / {
              proxy_pass https://127.0.0.1:6443\;
              proxy_ssl_verify off;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              
              # Timeouts
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
      }
      
      # Node Exporter - Metrics
      server {
          listen 80;
          server_name metrics.{{ target_env }}.wapps.com;
          
          # Proxy to Node Exporter
          location / {
              proxy_pass http://127.0.0.1:9100\;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              
              # Timeouts
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
      }
      
      # Default server - catch all other subdomains
      server {
          listen 80 default_server;
          listen 443 ssl http2 default_server;
          server_name _;
          
          # SSL configuration for default server
          ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
          ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
          ssl_prefer_server_ciphers off;
          
          # Show available services
          location / {
              return 200 '
      <!DOCTYPE html>
      <html>
      <head>
          <title>{{ target_env | title }} Environment - Available Services</title>
          <style>
              body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
              .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }
              .service { margin: 20px 0; padding: 15px; background: #f8f9fa; border-left: 4px solid #007acc; border-radius: 4px; }
              .service h3 { margin: 0 0 10px 0; color: #007acc; }
              .service p { margin: 5px 0; color: #666; }
              .url { font-family: monospace; background: #e9ecef; padding: 2px 6px; border-radius: 3px; }
              .status { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: bold; }
              .status.available { background: #d4edda; color: #155724; }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>{{ target_env | title }} Environment Services</h1>
              <p>Welcome to the {{ target_env }} environment. Here are the available services:</p>
              
              <div class="service">
                  <h3>üöÄ ArgoCD - GitOps CD</h3>
                  <p><strong>URL:</strong> <span class="url">https://argocd.{{ target_env }}.wapps.com</span></p>
                  <p>GitOps continuous deployment platform for managing Kubernetes applications.</p>
                  <span class="status available">Available</span>
              </div>
              
              <div class="service">
                  <h3>‚ò∏Ô∏è K3s API - Kubernetes API Server</h3>
                  <p><strong>URL:</strong> <span class="url">https://k3s-api.{{ target_env }}.wapps.com</span></p>
                  <p>Kubernetes API server for cluster management and kubectl access.</p>
                  <span class="status available">Available</span>
              </div>
              
              <div class="service">
                  <h3>üìä Node Exporter - Metrics</h3>
                  <p><strong>URL:</strong> <span class="url">http://metrics.{{ target_env }}.wapps.com</span></p>
                  <p>Prometheus node exporter for system metrics collection.</p>
                  <span class="status available">Available</span>
              </div>
              
              <div style="margin-top: 30px; padding: 15px; background: #e7f3ff; border-radius: 4px; border-left: 4px solid #007acc;">
                  <p><strong>üí° Tip:</strong> All services are accessible via their subdomain on the {{ target_env }}.wapps.com domain.</p>
                  <p><strong>üîí Security:</strong> Services use self-signed SSL certificates. You may need to accept the certificate in your browser.</p>
              </div>
          </div>
      </body>
      </html>
              ';
              add_header Content-Type text/html;
          }
      }
    dest: /etc/nginx/sites-available/{{ target_env }}-wapps
    mode: '0644'

- name: Enable the site
  file:
    src: /etc/nginx/sites-available/{{ target_env }}-wapps
    dest: /etc/nginx/sites-enabled/{{ target_env }}-wapps
    state: link

- name: Generate self-signed SSL certificate
  shell: |
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout /etc/ssl/private/nginx-selfsigned.key \
      -out /etc/ssl/certs/nginx-selfsigned.crt \
      -subj "/C=US/ST=State/L=City/O=Organization/CN={{ target_env }}.wapps.com"
  args:
    creates: /etc/ssl/certs/nginx-selfsigned.crt

- name: Test nginx configuration
  shell: nginx -t
  register: nginx_test
  changed_when: false
  failed_when: nginx_test.rc != 0

- name: Start and enable nginx
  systemd:
    name: nginx
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for nginx to start
  wait_for:
    port: 80
    host: "{{ ansible_default_ipv4.address }}"
    timeout: 10
  ignore_errors: yes

- name: Test reverse proxy
  shell: |
    curl -s -o /dev/null -w "%{http_code}" http://argocd.\{\{ target_env }}.wapps.com || echo "Failed"
  register: nginx_test_result
  changed_when: false
  failed_when: false

- name: Debug nginx test result
  debug:
    msg: |
      Nginx Test Result: {{ nginx_test_result.stdout | default('Test not run') }}

- name: Display nginx configuration status
  debug:
    msg: |
      ‚úÖ Nginx reverse proxy configured successfully!
      
      üåê Service URLs:
      - ArgoCD: https://argocd.\{\{ target_env }}.wapps.com
      - K3s API: https://k3s-api.\{\{ target_env }}.wapps.com  
      - Node Exporter: http://metrics.\{\{ target_env }}.wapps.com
      - Service List: https://anything.\{\{ target_env }}.wapps.com
      
      üîß Configuration:
      - Environment: {{ target_env }}
      - Nginx Config: /etc/nginx/sites-available/{{ target_env }}-wapps
      - SSL Certificate: Self-signed (browser warning expected)
      - Port: 80 (HTTP) and 443 (HTTPS)
      
      üìã Notes:
      - All HTTP traffic redirects to HTTPS
      - Self-signed SSL certificates are used
      - Default server shows available services for unknown subdomains
