---
- name: Host Environment Provisioning - Main Playbook
  hosts: localhost
  become: yes
  vars:
    target_env: "{{ target_env | default('staging') }}"
    git_sha: "{{ git_sha | default('main') }}"
    apps_dir: "/opt/wapps"
    ansible_user: "{{ ansible_env.USER | default('root') }}"

  tasks:
    - name: Display provisioning start
      debug:
        msg: |
          Starting host environment provisioning...
          Environment: {{ target_env }}
          Git SHA: {{ git_sha }}
          Target directory: {{ apps_dir }}

    - name: Include system configuration
      include_tasks: system/configure.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Include K3s installation
      include_tasks: k3s/install.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Install ArgoCD in cluster
      shell: |
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      register: argocd_install
      when: target_env in ['development', 'staging', 'production']

    - name: Remove ArgoCD NodePorts (use ClusterIP + Ingress)
      shell: |
        kubectl -n argocd patch svc argocd-server --type='json' -p '[
          {"op":"replace","path":"/spec/type","value":"ClusterIP"},
          {"op":"remove","path":"/spec/ports/0/nodePort"},
          {"op":"remove","path":"/spec/ports/1/nodePort"}
        ]'
      register: argocd_patch
      when: target_env in ['development', 'staging', 'production']

    - name: Wait for ArgoCD to be ready
      shell: kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
      register: argocd_wait
      changed_when: false
      when: target_env in ['development', 'staging', 'production']

    - name: Apply ArgoCD ingress
      shell: kubectl apply -f {{ playbook_dir }}/../cluster/argocd/ingress.yaml
      register: argocd_ingress
      when: target_env in ['development', 'staging', 'production']

    - name: Include Node Exporter installation
      include_tasks: node-exporter/install.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Include Tailscale installation
      include_tasks: tailscale/install.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Include Ingress installation
      include_tasks: ingress/install.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Include Nginx reverse proxy installation
      include_tasks: nginx/install.yml
      when: target_env in ['development', 'staging', 'production']

    - name: Include DNS installation
      include_tasks: dns/install.yml
      vars:
        target_ip: "{{ tailscale_ip.stdout | default(ansible_default_ipv4.address) }}"
      when: target_env in ['development', 'staging', 'production']



    - name: Display provisioning summary
      debug:
        msg: |
          Host provisioning completed successfully!
          Environment: {{ target_env }}
          Git SHA: {{ git_sha }}
          Applications directory: {{ apps_dir }}
          Installed services:
            - ArgoCD (Cluster) - GitOps CD
            - GitHub Actions Runner - CI/CD
            - K3s (port 6443) - Kubernetes
            - Node Exporter (port 9100) - Metrics
            - Tailscale (port 41641) - VPN networking
            - Nginx (ports 80/443) - Reverse Proxy
            - NTP - Time synchronization
          Logs directory: {{ apps_dir }}/logs