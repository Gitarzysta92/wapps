---
- name: Update system packages
  package:
    name: "*"
    state: latest
  when: target_env == "production"

- name: Install essential packages
  package:
    name:
      - curl
      - wget
      - git
      - unzip
      - htop
      - vim
      - jq
    state: present

- name: Create initial user
  user:
    name: "{{ initial_username | default('runner') }}"
    state: present
    shell: /bin/bash
    create_home: yes
    home: "/home/{{ initial_username | default('runner') }}"
  when: initial_username is defined

- name: Set initial user password
  user:
    name: "{{ initial_username | default('runner') }}"
    password: "{{ initial_password | password_hash('sha512') }}"
  when: initial_username is defined and initial_password is defined

- name: Add initial user to sudo group
  user:
    name: "{{ initial_username | default('runner') }}"
    groups: sudo
    append: yes
  when: initial_username is defined

- name: Configure kernel parameters for K3s
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: 'vm.max_map_count', value: '262144' }
    - { name: 'fs.file-max', value: '65536' }
    - { name: 'net.core.somaxconn', value: '65535' }
    - { name: 'net.ipv4.tcp_max_syn_backlog', value: '65535' }

- name: Configure system limits
  pam_limits:
    domain: '*'
    limit_type: '{{ item.type }}'
    limit_item: '{{ item.item }}'
    value: '{{ item.value }}'
  loop:
    - { type: 'soft', item: 'nofile', value: '65536' }
    - { type: 'hard', item: 'nofile', value: '65536' }
    - { type: 'soft', item: 'nproc', value: '32768' }
    - { type: 'hard', item: 'nproc', value: '32768' }

- name: Disable swap for Kubernetes
  shell: |
    swapoff -a
    sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  args:
    creates: /tmp/swap-disabled

- name: Configure timezone
  timezone:
    name: UTC

- name: Configure time synchronization
  block:
    - name: Install chrony (modern NTP alternative)
      package:
        name: chrony
        state: present

    - name: Start and enable chrony
      systemd:
        name: chrony
        state: started
        enabled: yes

    - name: Verify chrony service is running
      systemd:
        name: chrony
      register: chrony_service_status
      changed_when: false

    - name: Display time sync status
      debug:
        msg: "Time synchronization configured with chrony - Service status: {{ chrony_service_status.status.ActiveState }}"

- name: Create applications directory
  file:
    path: "{{ apps_dir }}"
    state: directory
    mode: '0755'

- name: Configure git user name
  git_config:
    name: user.name
    value: "{{ git_user_name | default('GitHub Actions') }}"
    scope: global
  when: git_token is defined

- name: Configure git user email
  git_config:
    name: user.email
    value: "{{ git_user_email | default('actions@github.com') }}"
    scope: global
  when: git_token is defined

- name: Configure system monitoring
  block:
    - name: Create monitoring directory
      file:
        path: /etc/monitoring
        state: directory
        mode: '0755'

    - name: Configure logrotate for application logs
      copy:
        content: |
          {{ apps_dir }}/logs/*.log {
              daily
              missingok
              rotate 7
              compress
              delaycompress
              notifempty
              create 644 root root
          }
        dest: /etc/logrotate.d/wapps
        mode: '0644'

    - name: Configure system log rotation
      copy:
        content: |
          /var/log/syslog {
              daily
              missingok
              rotate 7
              compress
              delaycompress
              notifempty
              create 640 syslog adm
          }
          
          /var/log/kern.log {
              daily
              missingok
              rotate 7
              compress
              delaycompress
              notifempty
              create 640 syslog adm
          }
        dest: /etc/logrotate.d/system-logs
        mode: '0644'

- name: Setup system services
  block:
    - name: Create systemd service for host applications
      copy:
        content: |
          [Unit]
          Description=WApps Host Services
          After=network.target

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory={{ apps_dir }}
          ExecStart=/bin/true
          User={{ ansible_user }}
          Group={{ ansible_user }}

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/wapps-host.service
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable wapps-host service
      systemd:
        name: wapps-host
        enabled: yes
        state: started

- name: Configure firewall rules
  block:
    - name: Install ufw
      package:
        name: ufw
        state: present

    - name: Allow SSH
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Allow HTTP
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Allow HTTPS
      ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Allow K3s API server
      ufw:
        rule: allow
        port: "6443"
        proto: tcp

    - name: Allow ArgoCD HTTPS
      ufw:
        rule: allow
        port: "30443"
        proto: tcp

    - name: Allow ArgoCD HTTP
      ufw:
        rule: allow
        port: "30080"
        proto: tcp

    - name: Allow Node Exporter
      ufw:
        rule: allow
        port: "9100"
        proto: tcp

    - name: Allow Tailscale
      ufw:
        rule: allow
        port: "41641"
        proto: udp

    - name: Allow Tailscale outbound
      ufw:
        rule: allow
        port: "41641"
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled

- name: Create application logs directory
  file:
    path: "{{ apps_dir }}/logs"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"